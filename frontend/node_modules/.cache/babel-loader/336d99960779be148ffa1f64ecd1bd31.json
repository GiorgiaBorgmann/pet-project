{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/giorgiaborgmann/Documents/Itc/pet-project/pet-project/frontend/src/modules/Cloudinary.js\";\nimport React from 'react';\nimport { WidgetLoader, Widget } from 'react-cloudinary-upload-widget';\n\nconst Cloudinary = ({\n  uploadImg\n}) => {\n  const successCallBack = result => {\n    console.log(\"working\");\n    uploadImg(result);\n  };\n\n  const failureCallBack = error => {\n    console.log(error);\n    console.log(\"Not Working\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(WidgetLoader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), \"Add a picture\", /*#__PURE__*/_jsxDEV(Widget, {\n      sources: ['local', 'camera', 'dropbox'] // set the sources available for uploading -> by default\n      // all sources are available. More information on their use can be found at \n      // https://cloudinary.com/documentation/upload_widget#the_sources_parameter\n      ,\n      sourceKeys: {\n        dropboxAppKey: '1dsf42dl1i2',\n        instagramClientId: 'd7aadf962m'\n      } // add source keys \n      // and ID's as an object. More information on their use can be found at \n      // https://cloudinary.com/documentation/upload_widget#the_sources_parameter\n      ,\n      resourceType: 'image' // optionally set with 'auto', 'image', 'video' or 'raw' -> default = 'auto'\n      ,\n      cloudName: 'duwtajcro' // your cloudinary account cloud name. \n      // Located on https://cloudinary.com/console/\n      ,\n      uploadPreset: 'bjif7sqa' // check that an upload preset exists and check mode is signed or unisgned\n      ,\n      buttonText: 'Open' // default 'Upload Files'\n      ,\n      style: {\n        color: 'white',\n        border: 'none',\n        width: '120px',\n        backgroundColor: 'green',\n        borderRadius: '4px',\n        height: '25px'\n      } // inline styling only or style id='cloudinary_upload_button'\n      ,\n      folder: 'pets' // set cloudinary folder name to send file\n      ,\n      cropping: false // set ability to crop images -> default = true\n      ,\n      onSuccess: successCallBack // add success callback -> returns result\n      ,\n      onFailure: failureCallBack // add failure callback -> returns 'response.error' + 'response.result'\n      ,\n      logging: false // logs will be provided for success and failure messages, \n      // set to false for production -> default = true\n      ,\n      customPublicId: 'sample' // set a specific custom public_id. \n      // To use the file name as the public_id use 'use_filename={true}' parameter\n      ,\n      eager: 'w_400,h_300,c_pad|w_260,h_200,c_crop' // add eager transformations -> deafult = null\n      ,\n      use_filename: false // tell Cloudinary to use the original name of the uploaded \n      // file as its public ID -> default = true,\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_c = Cloudinary;\nexport default Cloudinary;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cloudinary\");","map":{"version":3,"sources":["/Users/giorgiaborgmann/Documents/Itc/pet-project/pet-project/frontend/src/modules/Cloudinary.js"],"names":["React","WidgetLoader","Widget","Cloudinary","uploadImg","successCallBack","result","console","log","failureCallBack","error","dropboxAppKey","instagramClientId","color","border","width","backgroundColor","borderRadius","height"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,EAAuBC,MAAvB,QAAqC,gCAArC;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAClC,QAAMC,eAAe,GAAIC,MAAD,IAAY;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAJ,IAAAA,SAAS,CAACE,MAAD,CAAT;AACH,GAHD;;AAIA,QAAMG,eAAe,GAAIC,KAAD,IAAW;AAC/BH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACH,GAHD;;AAIA,sBACI;AAAA,4BACI,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YADJ,gCAEI,QAAC,MAAD;AACI,MAAA,OAAO,EAAE,CAAC,OAAD,EAAU,QAAV,EAAoB,SAApB,CADb,CAC6C;AACzC;AACA;AAHJ;AAII,MAAA,UAAU,EAAE;AAAEG,QAAAA,aAAa,EAAE,aAAjB;AAAgCC,QAAAA,iBAAiB,EAAE;AAAnD,OAJhB,CAImF;AAC/E;AACA;AANJ;AAOI,MAAA,YAAY,EAAE,OAPlB,CAO2B;AAP3B;AAQI,MAAA,SAAS,EAAE,WARf,CAQ4B;AACxB;AATJ;AAUI,MAAA,YAAY,EAAE,UAVlB,CAU8B;AAV9B;AAWI,MAAA,UAAU,EAAE,MAXhB,CAWwB;AAXxB;AAYI,MAAA,KAAK,EAAE;AACHC,QAAAA,KAAK,EAAE,OADJ;AAEHC,QAAAA,MAAM,EAAE,MAFL;AAGHC,QAAAA,KAAK,EAAE,OAHJ;AAIHC,QAAAA,eAAe,EAAE,OAJd;AAKHC,QAAAA,YAAY,EAAE,KALX;AAMHC,QAAAA,MAAM,EAAE;AANL,OAZX,CAmBO;AAnBP;AAoBI,MAAA,MAAM,EAAE,MApBZ,CAoBoB;AApBpB;AAqBI,MAAA,QAAQ,EAAE,KArBd,CAqBqB;AArBrB;AAsBI,MAAA,SAAS,EAAEb,eAtBf,CAsBgC;AAtBhC;AAuBI,MAAA,SAAS,EAAEI,eAvBf,CAuBgC;AAvBhC;AAwBI,MAAA,OAAO,EAAE,KAxBb,CAwBoB;AAChB;AAzBJ;AA0BI,MAAA,cAAc,EAAE,QA1BpB,CA0B8B;AAC1B;AA3BJ;AA4BI,MAAA,KAAK,EAAE,sCA5BX,CA4BmD;AA5BnD;AA6BI,MAAA,YAAY,EAAE,KA7BlB,CA6ByB;AACzB;;AA9BA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAsCH,CA/CD;;KAAMN,U;AAgDN,eAAeA,UAAf","sourcesContent":["import React from 'react'\n\nimport { WidgetLoader, Widget } from 'react-cloudinary-upload-widget'\n\nconst Cloudinary = ({ uploadImg }) => {\n    const successCallBack = (result) => {\n        console.log(\"working\");\n        uploadImg(result)\n    };\n    const failureCallBack = (error) => {\n        console.log(error);\n        console.log(\"Not Working\");\n    };\n    return (\n        <>\n            <WidgetLoader />Add a picture\n            <Widget\n                sources={['local', 'camera', 'dropbox']} // set the sources available for uploading -> by default\n                // all sources are available. More information on their use can be found at \n                // https://cloudinary.com/documentation/upload_widget#the_sources_parameter\n                sourceKeys={{ dropboxAppKey: '1dsf42dl1i2', instagramClientId: 'd7aadf962m' }} // add source keys \n                // and ID's as an object. More information on their use can be found at \n                // https://cloudinary.com/documentation/upload_widget#the_sources_parameter\n                resourceType={'image'} // optionally set with 'auto', 'image', 'video' or 'raw' -> default = 'auto'\n                cloudName={'duwtajcro'} // your cloudinary account cloud name. \n                // Located on https://cloudinary.com/console/\n                uploadPreset={'bjif7sqa'} // check that an upload preset exists and check mode is signed or unisgned\n                buttonText={'Open'} // default 'Upload Files'\n                style={{\n                    color: 'white',\n                    border: 'none',\n                    width: '120px',\n                    backgroundColor: 'green',\n                    borderRadius: '4px',\n                    height: '25px'\n                }} // inline styling only or style id='cloudinary_upload_button'\n                folder={'pets'} // set cloudinary folder name to send file\n                cropping={false} // set ability to crop images -> default = true\n                onSuccess={successCallBack} // add success callback -> returns result\n                onFailure={failureCallBack} // add failure callback -> returns 'response.error' + 'response.result'\n                logging={false} // logs will be provided for success and failure messages, \n                // set to false for production -> default = true\n                customPublicId={'sample'} // set a specific custom public_id. \n                // To use the file name as the public_id use 'use_filename={true}' parameter\n                eager={'w_400,h_300,c_pad|w_260,h_200,c_crop'} // add eager transformations -> deafult = null\n                use_filename={false} // tell Cloudinary to use the original name of the uploaded \n            // file as its public ID -> default = true,\n\n            />\n        </>\n    )\n}\nexport default Cloudinary "]},"metadata":{},"sourceType":"module"}